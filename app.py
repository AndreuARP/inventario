import streamlit as st
import pandas as pd
import os
from io import StringIO
import csv
import ftplib
from datetime import datetime
import schedule
import time
import threading
from datetime import datetime

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Consulta de Stock",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Constantes
PASSWORD = "stock2025"  # Contrase√±a por defecto, se puede cambiar por variable de entorno
CSV_FILE_PATH = "data/productos.csv"

def check_password():
    """Funci√≥n para verificar la contrase√±a de acceso"""
    if "password_correct" not in st.session_state:
        st.session_state.password_correct = False
    
    if not st.session_state.password_correct:
        st.title("üîê Acceso al Sistema de Stock")
        st.markdown("---")
        
        password = st.text_input(
            "Ingrese la contrase√±a para acceder:",
            type="password",
            placeholder="Contrase√±a requerida"
        )
        
        if st.button("Ingresar", type="primary"):
            if password == PASSWORD:
                st.session_state.password_correct = True
                st.success("‚úÖ Acceso concedido. Redirigiendo...")
                st.rerun()
            else:
                st.error("‚ùå Contrase√±a incorrecta. Intente nuevamente.")
        
        st.markdown("---")
        st.info("üí° Contacte al administrador del sistema si no tiene acceso.")
        return False
    
    return True

def load_data():
    """Cargar datos desde el archivo CSV"""
    try:
        if os.path.exists(CSV_FILE_PATH):
            df = pd.read_csv(CSV_FILE_PATH)
            # Validar que tenga las columnas requeridas
            required_columns = ['Codigo', 'Descripcion', 'Familia', 'Stock']
            if all(col in df.columns for col in required_columns):
                return df
            else:
                st.error(f"‚ùå El archivo CSV debe contener las columnas: {', '.join(required_columns)}")
                return pd.DataFrame(columns=required_columns)
        else:
            # Crear archivo CSV vac√≠o con estructura correcta
            os.makedirs("data", exist_ok=True)
            df = pd.DataFrame(columns=['Codigo', 'Descripcion', 'Familia', 'Stock'])
            df.to_csv(CSV_FILE_PATH, index=False)
            return df
    except Exception as e:
        st.error(f"‚ùå Error al cargar los datos: {str(e)}")
        return pd.DataFrame(columns=['Codigo', 'Descripcion', 'Familia', 'Stock'])

def save_data(df):
    """Guardar datos en el archivo CSV"""
    try:
        os.makedirs("data", exist_ok=True)
        df.to_csv(CSV_FILE_PATH, index=False)
        return True
    except Exception as e:
        st.error(f"‚ùå Error al guardar los datos: {str(e)}")
        return False

def download_from_ftp(ftp_host, ftp_user, ftp_password, ftp_file_path, ftp_port=21):
    """Descargar archivo CSV desde servidor FTP"""
    try:
        # Conectar al servidor FTP
        ftp = ftplib.FTP()
        ftp.connect(ftp_host, ftp_port)
        ftp.login(ftp_user, ftp_password)
        
        # Descargar el archivo
        csv_content = []
        ftp.retrlines(f'RETR {ftp_file_path}', csv_content.append)
        
        # Cerrar conexi√≥n
        ftp.quit()
        
        # Unir las l√≠neas del archivo
        csv_string = '\n'.join(csv_content)
        
        return True, csv_string
        
    except ftplib.all_errors as e:
        return False, f"Error de FTP: {str(e)}"
    except Exception as e:
        return False, f"Error general: {str(e)}"

def auto_update_from_ftp():
    """Funci√≥n para actualizaci√≥n autom√°tica desde FTP"""
    if 'ftp_config' in st.session_state and 'auto_ftp_enabled' in st.session_state:
        config = st.session_state.ftp_config
        password = st.session_state.get('ftp_password', '')
        
        if all([config['host'], config['user'], config['file_path'], password]):
            try:
                success, result = download_from_ftp(
                    config['host'], 
                    config['user'], 
                    password, 
                    config['file_path'], 
                    config['port']
                )
                
                if success:
                    is_valid, csv_result = validate_csv_content(result)
                    if is_valid:
                        if save_data(csv_result):
                            st.session_state['last_auto_update'] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                            return True
                return False
            except:
                return False
    return False

def schedule_worker():
    """Worker que ejecuta las tareas programadas"""
    while True:
        schedule.run_pending()
        time.sleep(60)  # Revisa cada minuto

# Inicializar el hilo de programaci√≥n si no existe
if 'scheduler_started' not in st.session_state:
    st.session_state.scheduler_started = True
    # Programar actualizaci√≥n diaria a las 6:00 AM
    schedule.every().day.at("06:00").do(auto_update_from_ftp)
    # Iniciar el worker en un hilo separado
    scheduler_thread = threading.Thread(target=schedule_worker, daemon=True)
    scheduler_thread.start()

def validate_csv_content(content):
    """Validar el contenido del archivo CSV"""
    try:
        # Leer el contenido como DataFrame
        df = pd.read_csv(StringIO(content))
        
        # Verificar columnas requeridas
        required_columns = ['Codigo', 'Descripcion', 'Familia', 'Stock']
        if not all(col in df.columns for col in required_columns):
            return False, f"El archivo debe contener las columnas: {', '.join(required_columns)}"
        
        # Verificar que Stock sea num√©rico
        try:
            df['Stock'] = pd.to_numeric(df['Stock'], errors='coerce')
            if df['Stock'].isna().any():
                return False, "La columna 'Stock' debe contener solo valores num√©ricos"
        except:
            return False, "Error al procesar la columna 'Stock'"
        
        # Verificar que no haya c√≥digos duplicados
        if df['Codigo'].duplicated().any():
            return False, "Se encontraron c√≥digos de producto duplicados"
        
        return True, df
    
    except Exception as e:
        return False, f"Error al procesar el archivo: {str(e)}"

def get_stock_color(stock):
    """Obtener color para el indicador de stock"""
    try:
        stock_num = float(stock)
        if stock_num <= 5:
            return "üî¥"  # Stock bajo
        elif stock_num <= 20:
            return "üü°"  # Stock medio
        else:
            return "üü¢"  # Stock alto
    except:
        return "‚ö™"  # Sin datos

def filter_dataframe(df, search_term):
    """Filtrar DataFrame por t√©rmino de b√∫squeda"""
    if not search_term:
        return df
    
    # Convertir todo a string para b√∫squeda
    search_term = str(search_term).lower()
    
    # Buscar en todas las columnas
    mask = (
        df['Codigo'].astype(str).str.lower().str.contains(search_term, na=False) |
        df['Descripcion'].astype(str).str.lower().str.contains(search_term, na=False) |
        df['Familia'].astype(str).str.lower().str.contains(search_term, na=False) |
        df['Stock'].astype(str).str.lower().str.contains(search_term, na=False)
    )
    
    return df[mask]

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    # Verificar contrase√±a
    if not check_password():
        return
    
    # T√≠tulo principal
    st.title("üì¶ Sistema de Consulta de Stock")
    st.markdown("---")
    
    # Sidebar para carga de archivos
    with st.sidebar:
        st.header("üîß Administraci√≥n")
        
        # Bot√≥n de cerrar sesi√≥n
        if st.button("üö™ Cerrar Sesi√≥n", type="secondary"):
            st.session_state.password_correct = False
            st.rerun()
        
        st.markdown("---")
        
        # Secci√≥n de carga de archivos
        st.subheader("üìÇ Actualizar Datos")
        
        # Tabs para diferentes m√©todos de carga
        tab1, tab2 = st.tabs(["üìÅ Archivo Local", "üåê Servidor FTP"])
        
        with tab1:
            uploaded_file = st.file_uploader(
                "Cargar archivo CSV:",
                type=['csv'],
                help="El archivo debe contener las columnas: Codigo, Descripcion, Familia, Stock"
            )
            
            if uploaded_file is not None:
                # Leer contenido del archivo
                content = uploaded_file.read().decode('utf-8')
                
                # Validar contenido
                is_valid, result = validate_csv_content(content)
                
                if is_valid:
                    st.success("‚úÖ Archivo v√°lido")
                    
                    if st.button("üíæ Actualizar Base de Datos", type="primary", key="local_update"):
                        if save_data(result):
                            st.success("üéâ ¬°Datos actualizados exitosamente!")
                            st.rerun()
                else:
                    st.error(f"‚ùå {result}")
        
        with tab2:
            st.markdown("**Configuraci√≥n del Servidor FTP:**")
            
            # Inicializar configuraci√≥n FTP en session state
            if 'ftp_config' not in st.session_state:
                st.session_state.ftp_config = {
                    'host': '',
                    'port': 21,
                    'user': '',
                    'file_path': ''
                }
            
            with st.form("ftp_form"):
                ftp_host = st.text_input(
                    "Servidor FTP:", 
                    value=st.session_state.ftp_config['host'],
                    placeholder="ftp.ejemplo.com"
                )
                ftp_port = st.number_input(
                    "Puerto:", 
                    value=st.session_state.ftp_config['port'], 
                    min_value=1, 
                    max_value=65535
                )
                ftp_user = st.text_input(
                    "Usuario:", 
                    value=st.session_state.ftp_config['user'],
                    placeholder="usuario"
                )
                ftp_password = st.text_input(
                    "Contrase√±a:", 
                    type="password",
                    help="La contrase√±a se guardar√° de forma segura para actualizaciones autom√°ticas"
                )
                ftp_file_path = st.text_input(
                    "Ruta del archivo:", 
                    value=st.session_state.ftp_config['file_path'],
                    placeholder="/data/productos.csv"
                )
                
                col1, col2 = st.columns(2)
                with col1:
                    save_config = st.form_submit_button("üíæ Guardar Configuraci√≥n")
                with col2:
                    download_ftp = st.form_submit_button("üîÑ Descargar desde FTP", type="primary")
                
                if save_config:
                    st.session_state.ftp_config = {
                        'host': ftp_host,
                        'port': ftp_port,
                        'user': ftp_user,
                        'file_path': ftp_file_path
                    }
                    if ftp_password:
                        st.session_state.ftp_password = ftp_password
                    st.success("‚úÖ Configuraci√≥n FTP guardada")
                    st.rerun()
                
                if download_ftp:
                    if all([ftp_host, ftp_user, ftp_password, ftp_file_path]):
                        # Guardar configuraci√≥n autom√°ticamente al descargar
                        st.session_state.ftp_config = {
                            'host': ftp_host,
                            'port': ftp_port,
                            'user': ftp_user,
                            'file_path': ftp_file_path
                        }
                        if ftp_password:
                            st.session_state.ftp_password = ftp_password
                        
                        with st.spinner("Conectando al servidor FTP..."):
                            success, result = download_from_ftp(ftp_host, ftp_user, ftp_password, ftp_file_path, ftp_port)
                            
                            if success:
                                # Validar contenido descargado
                                is_valid, csv_result = validate_csv_content(result)
                                
                                if is_valid:
                                    st.success("‚úÖ Archivo descargado y validado correctamente")
                                    st.info(f"üìä Se encontraron {len(csv_result)} productos")
                                    
                                    if st.button("üíæ Actualizar Base de Datos", type="primary", key="ftp_update"):
                                        if save_data(csv_result):
                                            st.success("üéâ ¬°Datos actualizados desde FTP exitosamente!")
                                            st.rerun()
                                else:
                                    st.error(f"‚ùå Error en el archivo descargado: {csv_result}")
                            else:
                                st.error(f"‚ùå {result}")
                    else:
                        st.error("‚ùå Por favor complete todos los campos")
            
            # Configuraci√≥n de actualizaci√≥n autom√°tica
            st.markdown("---")
            st.markdown("**Actualizaci√≥n Autom√°tica:**")
            
            # Inicializar configuraci√≥n autom√°tica
            if 'auto_ftp_enabled' not in st.session_state:
                st.session_state.auto_ftp_enabled = False
            
            col1, col2 = st.columns([3, 1])
            with col1:
                auto_enabled = st.checkbox(
                    "Activar actualizaci√≥n autom√°tica diaria (6:00 AM)",
                    value=st.session_state.auto_ftp_enabled,
                    help="Descarga autom√°ticamente el archivo desde FTP todos los d√≠as"
                )
            
            with col2:
                if st.button("üîÑ Actualizar Ahora", help="Ejecutar actualizaci√≥n inmediata"):
                    if 'ftp_config' in st.session_state and st.session_state.get('ftp_password'):
                        with st.spinner("Actualizando desde FTP..."):
                            if auto_update_from_ftp():
                                st.success("‚úÖ Actualizaci√≥n autom√°tica completada")
                                st.rerun()
                            else:
                                st.error("‚ùå Error en la actualizaci√≥n autom√°tica")
                    else:
                        st.error("‚ùå Configure primero los datos de FTP")
            
            # Guardar estado de configuraci√≥n autom√°tica
            if auto_enabled != st.session_state.auto_ftp_enabled:
                st.session_state.auto_ftp_enabled = auto_enabled
                if auto_enabled and 'ftp_config' in st.session_state:
                    # Verificar que tengamos la contrase√±a guardada
                    if not st.session_state.get('ftp_password'):
                        st.warning("‚ö†Ô∏è Para la actualizaci√≥n autom√°tica, ingrese la contrase√±a FTP arriba")
                    else:
                        st.success("‚úÖ Actualizaci√≥n autom√°tica activada para las 6:00 AM")
                elif not auto_enabled:
                    st.info("‚ÑπÔ∏è Actualizaci√≥n autom√°tica desactivada")
            
            # Configurar tiempo personalizado
            if auto_enabled:
                st.markdown("**Horario Personalizado:**")
                col1, col2 = st.columns(2)
                with col1:
                    update_hour = st.selectbox("Hora:", list(range(24)), index=6)
                with col2:
                    update_minute = st.selectbox("Minuto:", [0, 15, 30, 45], index=0)
                
                if st.button("‚è∞ Cambiar Horario"):
                    # Limpiar trabajos anteriores
                    schedule.clear()
                    # Programar nuevo horario
                    time_str = f"{update_hour:02d}:{update_minute:02d}"
                    schedule.every().day.at(time_str).do(auto_update_from_ftp)
                    st.success(f"‚úÖ Actualizaci√≥n programada para las {time_str}")
            
            # Mostrar informaci√≥n de √∫ltima actualizaci√≥n
            st.markdown("---")
            if os.path.exists(CSV_FILE_PATH):
                mod_time = os.path.getmtime(CSV_FILE_PATH)
                last_update = datetime.fromtimestamp(mod_time).strftime("%d/%m/%Y %H:%M:%S")
                st.info(f"üìÖ √öltima actualizaci√≥n: {last_update}")
            
            # Mostrar √∫ltima actualizaci√≥n autom√°tica
            if 'last_auto_update' in st.session_state:
                st.info(f"ü§ñ √öltima actualizaci√≥n autom√°tica: {st.session_state.last_auto_update}")
            
            # Estado del programador
            if auto_enabled:
                next_run = schedule.next_run()
                if next_run:
                    st.info(f"‚è≥ Pr√≥xima actualizaci√≥n: {next_run.strftime('%d/%m/%Y %H:%M:%S')}")
        
        st.markdown("---")
        
        # Informaci√≥n del sistema
        st.subheader("‚ÑπÔ∏è Informaci√≥n")
        df = load_data()
        st.metric("Total de Productos", len(df))
        
        if not df.empty:
            stock_bajo = len(df[pd.to_numeric(df['Stock'], errors='coerce') <= 5])
            st.metric("üî¥ Stock Bajo (‚â§5)", stock_bajo)
    
    # Cargar datos
    df = load_data()
    
    if df.empty:
        st.warning("‚ö†Ô∏è No hay datos disponibles. Cargue un archivo CSV para comenzar.")
        return
    
    # Barra de b√∫squeda
    col1, col2 = st.columns([3, 1])
    
    with col1:
        search_term = st.text_input(
            "üîç Buscar productos:",
            placeholder="Buscar por c√≥digo, descripci√≥n, familia o stock...",
            help="La b√∫squeda es en tiempo real y busca en todos los campos"
        )
    
    with col2:
        st.markdown("<br>", unsafe_allow_html=True)  # Espaciado
        clear_search = st.button("üóëÔ∏è Limpiar", help="Limpiar b√∫squeda")
        if clear_search:
            st.rerun()
    
    # Filtrar datos
    filtered_df = filter_dataframe(df, search_term)
    
    # Mostrar resultados
    if filtered_df.empty:
        st.warning("üîç No se encontraron productos que coincidan con la b√∫squeda.")
    else:
        # Informaci√≥n de resultados
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìä Productos Encontrados", len(filtered_df))
        with col2:
            if search_term:
                st.metric("üìã Total en Base", len(df))
        with col3:
            # Bot√≥n de exportar
            csv_export = filtered_df.to_csv(index=False)
            st.download_button(
                label="üì• Exportar Resultados",
                data=csv_export,
                file_name=f"stock_productos_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                help="Descargar resultados en formato CSV"
            )
        
        st.markdown("---")
        
        # Preparar datos para mostrar con indicadores de stock
        display_df = filtered_df.copy()
        display_df['Indicador'] = display_df['Stock'].apply(get_stock_color)
        
        # Reordenar columnas
        display_df = display_df[['Indicador', 'Codigo', 'Descripcion', 'Familia', 'Stock']]
        
        # Configurar la tabla
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "Indicador": st.column_config.TextColumn(
                    "Estado",
                    help="üü¢ Stock Alto | üü° Stock Medio | üî¥ Stock Bajo",
                    width="small"
                ),
                "Codigo": st.column_config.TextColumn(
                    "C√≥digo",
                    width="medium"
                ),
                "Descripcion": st.column_config.TextColumn(
                    "Descripci√≥n",
                    width="large"
                ),
                "Familia": st.column_config.TextColumn(
                    "Familia",
                    width="medium"
                ),
                "Stock": st.column_config.NumberColumn(
                    "Stock",
                    width="small",
                    format="%d"
                )
            }
        )
        
        # Leyenda de colores
        st.markdown("---")
        st.markdown("""
        **Leyenda de Stock:**
        - üü¢ **Stock Alto:** M√°s de 20 unidades
        - üü° **Stock Medio:** Entre 6 y 20 unidades  
        - üî¥ **Stock Bajo:** 5 unidades o menos
        """)

if __name__ == "__main__":
    main()
