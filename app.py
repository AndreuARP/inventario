import streamlit as st
import pandas as pd
import os
from io import StringIO
import csv
import ftplib
import socket
from datetime import datetime
import urllib.request
import urllib.error
import paramiko
import schedule
import time
import threading
from datetime import datetime

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Consulta de Stock",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Constantes
PASSWORD = "stock2025"  # Contrase√±a por defecto, se puede cambiar por variable de entorno
CSV_FILE_PATH = "data/productos.csv"

def check_password():
    """Funci√≥n para verificar la contrase√±a de acceso"""
    if "password_correct" not in st.session_state:
        st.session_state.password_correct = False
    
    if not st.session_state.password_correct:
        st.title("üîê Acceso al Sistema de Stock")
        st.markdown("---")
        
        password = st.text_input(
            "Ingrese la contrase√±a para acceder:",
            type="password",
            placeholder="Contrase√±a requerida"
        )
        
        if st.button("Ingresar", type="primary"):
            if password == PASSWORD:
                st.session_state.password_correct = True
                st.success("‚úÖ Acceso concedido. Redirigiendo...")
                st.rerun()
            else:
                st.error("‚ùå Contrase√±a incorrecta. Intente nuevamente.")
        
        st.markdown("---")
        st.info("üí° Contacte al administrador del sistema si no tiene acceso.")
        return False
    
    return True

def load_data():
    """Cargar datos desde el archivo CSV"""
    try:
        if os.path.exists(CSV_FILE_PATH):
            df = pd.read_csv(CSV_FILE_PATH)
            # Validar que tenga las columnas requeridas
            required_columns = ['Codigo', 'Descripcion', 'Familia', 'Stock']
            if all(col in df.columns for col in required_columns):
                return df
            else:
                st.error(f"‚ùå El archivo CSV debe contener las columnas: {', '.join(required_columns)}")
                return pd.DataFrame(columns=required_columns)
        else:
            # Crear archivo CSV vac√≠o con estructura correcta
            os.makedirs("data", exist_ok=True)
            df = pd.DataFrame(columns=['Codigo', 'Descripcion', 'Familia', 'Stock'])
            df.to_csv(CSV_FILE_PATH, index=False)
            return df
    except Exception as e:
        st.error(f"‚ùå Error al cargar los datos: {str(e)}")
        return pd.DataFrame(columns=['Codigo', 'Descripcion', 'Familia', 'Stock'])

def save_data(df):
    """Guardar datos en el archivo CSV"""
    try:
        os.makedirs("data", exist_ok=True)
        df.to_csv(CSV_FILE_PATH, index=False)
        return True
    except Exception as e:
        st.error(f"‚ùå Error al guardar los datos: {str(e)}")
        return False

def download_from_ftp(ftp_host, ftp_user, ftp_password, ftp_file_path, ftp_port=21, passive_mode=True, timeout=30):
    """Descargar archivo CSV desde servidor FTP"""
    ftp = None
    try:
        # Validar par√°metros
        if not all([ftp_host, ftp_user, ftp_password, ftp_file_path]):
            return False, "Faltan par√°metros de conexi√≥n FTP"
        
        # Conectar al servidor FTP
        ftp = ftplib.FTP()
        ftp.set_debuglevel(0)  # Desactivar debug para producci√≥n
        
        # Intentar conexi√≥n
        try:
            ftp.connect(ftp_host, ftp_port, timeout=timeout)
            # Configurar modo pasivo seg√∫n par√°metro
            ftp.set_pasv(passive_mode)
        except Exception as e:
            return False, f"No se pudo conectar al servidor {ftp_host}:{ftp_port} - {str(e)}"
        
        # Intentar login
        try:
            ftp.login(ftp_user, ftp_password)
        except Exception as e:
            return False, f"Error de autenticaci√≥n para usuario '{ftp_user}' - {str(e)}"
        
        # Verificar que el archivo existe
        try:
            ftp.size(ftp_file_path)
        except Exception as e:
            return False, f"Archivo '{ftp_file_path}' no encontrado en el servidor - {str(e)}"
        
        # Descargar el archivo
        csv_content = []
        try:
            ftp.retrlines(f'RETR {ftp_file_path}', csv_content.append)
        except Exception as e:
            return False, f"Error al descargar el archivo '{ftp_file_path}' - {str(e)}"
        
        # Verificar que se descarg√≥ contenido
        if not csv_content:
            return False, "El archivo descargado est√° vac√≠o"
        
        # Unir las l√≠neas del archivo
        csv_string = '\n'.join(csv_content)
        
        return True, csv_string
        
    except Exception as e:
        return False, f"Error inesperado: {str(e)}"
    finally:
        # Cerrar conexi√≥n de forma segura
        if ftp:
            try:
                ftp.quit()
            except:
                try:
                    ftp.close()
                except:
                    pass

def check_network_connectivity(host, port, timeout=5):
    """Verificar conectividad de red b√°sica antes de FTP"""
    try:
        socket.setdefaulttimeout(timeout)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except Exception:
        return False

def test_ftp_connection(ftp_host, ftp_user, ftp_password, ftp_port=21, passive_mode=True, timeout=10):
    """Probar la conectividad FTP sin descargar archivos"""
    # Primero verificar conectividad b√°sica
    if not check_network_connectivity(ftp_host, ftp_port, timeout=5):
        return False, f"No se puede alcanzar el servidor {ftp_host}:{ftp_port}. Verifique la direcci√≥n y puerto."
    
    ftp = None
    try:
        ftp = ftplib.FTP()
        ftp.set_debuglevel(0)
        
        # Probar conexi√≥n
        ftp.connect(ftp_host, ftp_port, timeout=timeout)
        # Configurar modo pasivo seg√∫n par√°metro
        ftp.set_pasv(passive_mode)
        
        # Probar login
        ftp.login(ftp_user, ftp_password)
        
        # Obtener directorio actual para confirmar que funciona
        current_dir = ftp.pwd()
        
        return True, f"Conexi√≥n exitosa. Directorio actual: {current_dir}"
        
    except ftplib.error_perm as e:
        if "530" in str(e):
            return False, f"Error de autenticaci√≥n: Usuario '{ftp_user}' o contrase√±a incorrectos"
        else:
            return False, f"Error de permisos FTP: {str(e)}"
    except ftplib.error_temp as e:
        return False, f"Error temporal del servidor FTP: {str(e)}"
    except socket.timeout:
        return False, f"Timeout de conexi√≥n. El servidor {ftp_host}:{ftp_port} no responde en {timeout} segundos"
    except ConnectionRefusedError:
        return False, f"Conexi√≥n rechazada por {ftp_host}:{ftp_port}. Verifique que el servicio FTP est√© ejecut√°ndose"
    except Exception as e:
        return False, f"Error de conexi√≥n: {str(e)}"
    finally:
        if ftp:
            try:
                ftp.quit()
            except:
                try:
                    ftp.close()
                except:
                    pass

def auto_diagnose_ftp(ftp_host, ftp_user, ftp_password, ftp_port=21):
    """Diagn√≥stico autom√°tico probando diferentes configuraciones FTP"""
    configurations = [
        {"passive": True, "timeout": 30, "description": "Modo pasivo (recomendado)"},
        {"passive": False, "timeout": 30, "description": "Modo activo"},
        {"passive": True, "timeout": 60, "description": "Modo pasivo con timeout extendido"},
        {"passive": False, "timeout": 60, "description": "Modo activo con timeout extendido"},
    ]
    
    results = []
    for config in configurations:
        success, message = test_ftp_connection(
            ftp_host, ftp_user, ftp_password, ftp_port, 
            config["passive"], config["timeout"]
        )
        results.append({
            "config": config["description"],
            "success": success,
            "message": message
        })
        if success:
            return True, config, results
    
    return False, None, results

def download_from_url(url, timeout=30):
    """Descargar archivo CSV desde URL directa"""
    try:
        # Configurar timeout
        urllib.request.socket.setdefaulttimeout(timeout)
        
        # Descargar el archivo
        with urllib.request.urlopen(url) as response:
            content = response.read().decode('utf-8')
            return True, content
            
    except urllib.error.HTTPError as e:
        return False, f"Error HTTP {e.code}: {e.reason}"
    except urllib.error.URLError as e:
        return False, f"Error de URL: {str(e.reason)}"
    except socket.timeout:
        return False, f"Timeout: La descarga tard√≥ m√°s de {timeout} segundos"
    except Exception as e:
        return False, f"Error al descargar: {str(e)}"

def download_from_sftp(sftp_host, sftp_user, sftp_password, sftp_file_path, sftp_port=22, timeout=30):
    """Descargar archivo CSV desde servidor SFTP"""
    ssh = None
    sftp = None
    try:
        # Validar par√°metros
        if not all([sftp_host, sftp_user, sftp_password, sftp_file_path]):
            return False, "Faltan par√°metros de conexi√≥n SFTP"
        
        # Crear cliente SSH
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # Conectar
        ssh.connect(
            hostname=sftp_host,
            port=sftp_port,
            username=sftp_user,
            password=sftp_password,
            timeout=timeout,
            look_for_keys=False,
            allow_agent=False
        )
        
        # Crear cliente SFTP
        sftp = ssh.open_sftp()
        
        # Verificar que el archivo existe
        try:
            sftp.stat(sftp_file_path)
        except FileNotFoundError:
            return False, f"Archivo '{sftp_file_path}' no encontrado en el servidor SFTP"
        
        # Descargar el archivo - probar diferentes m√©todos
        try:
            # M√©todo 1: Modo texto con UTF-8
            with sftp.open(sftp_file_path, 'r', encoding='utf-8') as remote_file:
                content = remote_file.read()
        except (UnicodeDecodeError, Exception):
            try:
                # M√©todo 2: Modo binario y decodificar UTF-8
                with sftp.open(sftp_file_path, 'rb') as remote_file:
                    content_bytes = remote_file.read()
                    content = content_bytes.decode('utf-8')
            except UnicodeDecodeError:
                try:
                    # M√©todo 3: Probar con latin-1 
                    content = content_bytes.decode('latin-1')
                except:
                    # M√©todo 4: Forzar UTF-8 ignorando errores
                    content = content_bytes.decode('utf-8', errors='ignore')
            
        return True, content
        
    except paramiko.AuthenticationException:
        return False, f"Error de autenticaci√≥n SFTP para usuario '{sftp_user}'"
    except paramiko.SSHException as e:
        return False, f"Error SSH: {str(e)}"
    except socket.timeout:
        return False, f"Timeout de conexi√≥n SFTP ({timeout}s)"
    except Exception as e:
        return False, f"Error SFTP: {str(e)}"
    finally:
        # Cerrar conexiones
        if sftp:
            try:
                sftp.close()
            except:
                pass
        if ssh:
            try:
                ssh.close()
            except:
                pass

def test_sftp_connection(sftp_host, sftp_user, sftp_password, sftp_port=22, timeout=10):
    """Probar la conectividad SFTP"""
    ssh = None
    sftp = None
    try:
        # Crear cliente SSH
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # Conectar
        ssh.connect(
            hostname=sftp_host,
            port=sftp_port,
            username=sftp_user,
            password=sftp_password,
            timeout=timeout,
            look_for_keys=False,
            allow_agent=False
        )
        
        # Crear cliente SFTP para probar
        sftp = ssh.open_sftp()
        
        # Obtener directorio actual
        current_dir = sftp.getcwd() or "/"
        
        return True, f"Conexi√≥n SFTP exitosa. Directorio actual: {current_dir}"
        
    except paramiko.AuthenticationException:
        return False, f"Error de autenticaci√≥n SFTP para usuario '{sftp_user}'"
    except paramiko.SSHException as e:
        return False, f"Error SSH: {str(e)}"
    except socket.timeout:
        return False, f"Timeout de conexi√≥n SFTP ({timeout}s)"
    except Exception as e:
        return False, f"Error SFTP: {str(e)}"
    finally:
        if sftp:
            try:
                sftp.close()
            except:
                pass
        if ssh:
            try:
                ssh.close()
            except:
                pass

def auto_update_from_ftp():
    """Funci√≥n para actualizaci√≥n autom√°tica desde FTP/SFTP"""
    # Priorizar SFTP si est√° configurado
    if 'sftp_config' in st.session_state and 'auto_ftp_enabled' in st.session_state:
        config = st.session_state.sftp_config
        password = st.session_state.get('sftp_password', '@Q&jb@kpcU(OhpQv95bN0%eI')
        
        if all([config['host'], config['user'], config['file_path'], password]):
            try:
                success, result = download_from_sftp(
                    config['host'], 
                    config['user'], 
                    password, 
                    config['file_path'], 
                    config['port'],
                    config.get('timeout', 30)
                )
                
                if success:
                    is_valid, csv_result = validate_csv_content(result)
                    if is_valid:
                        if save_data(csv_result):
                            st.session_state['last_auto_update'] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                            return True
                return False
            except:
                return False
    
    # Fallback a FTP si SFTP no est√° configurado
    if 'ftp_config' in st.session_state and 'auto_ftp_enabled' in st.session_state:
        config = st.session_state.ftp_config
        password = st.session_state.get('ftp_password', '')
        
        if all([config['host'], config['user'], config['file_path'], password]):
            try:
                success, result = download_from_ftp(
                    config['host'], 
                    config['user'], 
                    password, 
                    config['file_path'], 
                    config['port']
                )
                
                if success:
                    is_valid, csv_result = validate_csv_content(result)
                    if is_valid:
                        if save_data(csv_result):
                            st.session_state['last_auto_update'] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                            return True
                return False
            except:
                return False
    return False

def schedule_worker():
    """Worker que ejecuta las tareas programadas"""
    while True:
        schedule.run_pending()
        time.sleep(60)  # Revisa cada minuto

# Inicializar el hilo de programaci√≥n si no existe
if 'scheduler_started' not in st.session_state:
    st.session_state.scheduler_started = True
    # Programar actualizaci√≥n diaria a las 6:00 AM
    schedule.every().day.at("06:00").do(auto_update_from_ftp)
    # Iniciar el worker en un hilo separado
    scheduler_thread = threading.Thread(target=schedule_worker, daemon=True)
    scheduler_thread.start()

def validate_csv_content(content):
    """Validar el contenido del archivo CSV"""
    try:
        # Leer el contenido como DataFrame
        df = pd.read_csv(StringIO(content))
        
        # Verificar columnas requeridas
        required_columns = ['Codigo', 'Descripcion', 'Familia', 'Stock']
        if not all(col in df.columns for col in required_columns):
            return False, f"El archivo debe contener las columnas: {', '.join(required_columns)}"
        
        # Verificar que Stock sea num√©rico
        try:
            df['Stock'] = pd.to_numeric(df['Stock'], errors='coerce')
            if df['Stock'].isna().any():
                return False, "La columna 'Stock' debe contener solo valores num√©ricos"
        except:
            return False, "Error al procesar la columna 'Stock'"
        
        # Verificar que no haya c√≥digos duplicados
        if df['Codigo'].duplicated().any():
            return False, "Se encontraron c√≥digos de producto duplicados"
        
        return True, df
    
    except Exception as e:
        return False, f"Error al procesar el archivo: {str(e)}"

def get_stock_color(stock):
    """Obtener color para el indicador de stock"""
    try:
        stock_num = float(stock)
        if stock_num <= 5:
            return "üî¥"  # Stock bajo
        elif stock_num <= 20:
            return "üü°"  # Stock medio
        else:
            return "üü¢"  # Stock alto
    except:
        return "‚ö™"  # Sin datos

def filter_dataframe(df, search_term):
    """Filtrar DataFrame por t√©rmino de b√∫squeda"""
    if not search_term:
        return df
    
    # Convertir todo a string para b√∫squeda
    search_term = str(search_term).lower()
    
    # Buscar en todas las columnas
    mask = (
        df['Codigo'].astype(str).str.lower().str.contains(search_term, na=False) |
        df['Descripcion'].astype(str).str.lower().str.contains(search_term, na=False) |
        df['Familia'].astype(str).str.lower().str.contains(search_term, na=False) |
        df['Stock'].astype(str).str.lower().str.contains(search_term, na=False)
    )
    
    return df[mask]

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    # Verificar contrase√±a
    if not check_password():
        return
    
    # T√≠tulo principal
    st.title("üì¶ Sistema de Consulta de Stock")
    st.markdown("---")
    
    # Sidebar para carga de archivos
    with st.sidebar:
        st.header("üîß Administraci√≥n")
        
        # Bot√≥n de cerrar sesi√≥n
        if st.button("üö™ Cerrar Sesi√≥n", type="secondary"):
            st.session_state.password_correct = False
            st.rerun()
        
        st.markdown("---")
        
        # Secci√≥n de carga de archivos
        st.subheader("üìÇ Actualizar Datos")
        
        # Tabs para diferentes m√©todos de carga
        tab1, tab2, tab3, tab4 = st.tabs(["üìÅ Archivo Local", "üåê Servidor FTP", "üîê Servidor SFTP", "üîó URL Directa"])
        
        with tab1:
            uploaded_file = st.file_uploader(
                "Cargar archivo CSV:",
                type=['csv'],
                help="El archivo debe contener las columnas: Codigo, Descripcion, Familia, Stock"
            )
            
            if uploaded_file is not None:
                # Leer contenido del archivo
                content = uploaded_file.read().decode('utf-8')
                
                # Validar contenido
                is_valid, result = validate_csv_content(content)
                
                if is_valid:
                    st.success("‚úÖ Archivo v√°lido")
                    
                    if st.button("üíæ Actualizar Base de Datos", type="primary", key="local_update"):
                        if save_data(result):
                            st.success("üéâ ¬°Datos actualizados exitosamente!")
                            st.rerun()
                else:
                    st.error(f"‚ùå {result}")
        
        with tab2:
            st.markdown("**Configuraci√≥n del Servidor FTP:**")
            
            # Informaci√≥n de ayuda
            with st.expander("üí° Ayuda con Configuraci√≥n FTP"):
                st.markdown("""
                **Ejemplos de configuraci√≥n com√∫n:**
                
                - **Servidor FTP est√°ndar:**
                  - Puerto: 21 (por defecto)
                  - Ruta archivo: `/ruta/completa/productos.csv`
                
                - **Servidor SFTP:**
                  - Puerto: 22 (usar puerto SFTP si aplica)
                  
                - **Servidores de hosting:**
                  - Host: `ftp.tudominio.com` o IP del servidor
                  - Usuario: tu usuario FTP
                  - Ruta: `/public_html/data/productos.csv`
                
                **Problemas comunes y soluciones:**
                - ‚ùå "Connection refused": Revisar host y puerto
                - ‚ùå "Authentication failed": Verificar usuario/contrase√±a
                - ‚ùå "File not found": Confirmar ruta completa del archivo
                - ‚ùå "Timeout": Probar modo activo/pasivo o usar URL directa
                - ‚ùå "No se puede alcanzar": Firewall o red bloqueando conexi√≥n
                
                **üí° Alternativa recomendada:**
                Si FTP sigue fallando, use la pesta√±a "URL Directa" que es m√°s compatible con firewalls y redes empresariales.
                """)
            
            # Inicializar configuraci√≥n FTP en session state
            if 'ftp_config' not in st.session_state:
                st.session_state.ftp_config = {
                    'host': '',
                    'port': 21,
                    'user': '',
                    'file_path': ''
                }
            
            # Inicializar configuraci√≥n SFTP en session state  
            if 'sftp_config' not in st.session_state:
                st.session_state.sftp_config = {
                    'host': 'home567855122.1and1-data.host',
                    'port': 22,
                    'user': 'acc1195143440',
                    'file_path': '/stock/stock.csv',
                    'timeout': 30
                }
            
            with st.form("ftp_form"):
                ftp_host = st.text_input(
                    "Servidor FTP:", 
                    value=st.session_state.ftp_config['host'],
                    placeholder="ftp.ejemplo.com"
                )
                ftp_port = st.number_input(
                    "Puerto:", 
                    value=st.session_state.ftp_config['port'], 
                    min_value=1, 
                    max_value=65535
                )
                ftp_user = st.text_input(
                    "Usuario:", 
                    value=st.session_state.ftp_config['user'],
                    placeholder="usuario"
                )
                ftp_password = st.text_input(
                    "Contrase√±a:", 
                    type="password",
                    help="La contrase√±a se guardar√° de forma segura para actualizaciones autom√°ticas"
                )
                ftp_file_path = st.text_input(
                    "Ruta del archivo:", 
                    value=st.session_state.ftp_config['file_path'],
                    placeholder="/data/productos.csv"
                )
                
                # Opciones avanzadas
                with st.expander("‚öôÔ∏è Configuraci√≥n Avanzada"):
                    passive_mode = st.checkbox(
                        "Modo Pasivo (recomendado para firewalls)", 
                        value=True,
                        help="El modo pasivo resuelve problemas de conexi√≥n en la mayor√≠a de casos"
                    )
                    connection_timeout = st.slider(
                        "Timeout de conexi√≥n (segundos):", 
                        min_value=5, 
                        max_value=60, 
                        value=30
                    )
                
                col1, col2 = st.columns(2)
                with col1:
                    save_config = st.form_submit_button("üíæ Guardar Configuraci√≥n")
                    test_connection = st.form_submit_button("üîß Probar Conexi√≥n")
                with col2:
                    auto_diagnose = st.form_submit_button("ü©∫ Diagn√≥stico Autom√°tico")
                    download_ftp = st.form_submit_button("üîÑ Descargar desde FTP", type="primary")
                
                if save_config:
                    st.session_state.ftp_config = {
                        'host': ftp_host,
                        'port': ftp_port,
                        'user': ftp_user,
                        'file_path': ftp_file_path
                    }
                    if ftp_password:
                        st.session_state.ftp_password = ftp_password
                    st.success("‚úÖ Configuraci√≥n FTP guardada")
                    st.rerun()
                
                if test_connection:
                    if all([ftp_host, ftp_user, ftp_password]):
                        with st.spinner("Probando conexi√≥n FTP..."):
                            success, message = test_ftp_connection(
                                ftp_host, ftp_user, ftp_password, ftp_port, 
                                passive_mode, connection_timeout
                            )
                            if success:
                                st.success(f"‚úÖ {message}")
                            else:
                                st.error(f"‚ùå {message}")
                                # Sugerencia para probar modo alternativo
                                if "timed out" in message.lower():
                                    st.info("üí° Intenta desactivar el 'Modo Pasivo' en configuraci√≥n avanzada")
                    else:
                        st.error("‚ùå Complete todos los campos para probar la conexi√≥n")
                
                if auto_diagnose:
                    if all([ftp_host, ftp_user, ftp_password]):
                        with st.spinner("Ejecutando diagn√≥stico autom√°tico..."):
                            success, best_config, all_results = auto_diagnose_ftp(ftp_host, ftp_user, ftp_password, ftp_port)
                            
                            if success:
                                st.success(f"‚úÖ Conexi√≥n exitosa con: {best_config['description']}")
                                st.info(f"üí° Configuraci√≥n recomendada: Modo Pasivo = {best_config['passive']}, Timeout = {best_config['timeout']}s")
                            else:
                                st.error("‚ùå No se pudo establecer conexi√≥n con ninguna configuraci√≥n")
                            
                            # Mostrar resultados detallados
                            with st.expander("Ver resultados detallados del diagn√≥stico"):
                                for result in all_results:
                                    if result['success']:
                                        st.success(f"‚úÖ {result['config']}: {result['message']}")
                                    else:
                                        st.error(f"‚ùå {result['config']}: {result['message']}")
                    else:
                        st.error("‚ùå Complete todos los campos para ejecutar el diagn√≥stico")
                
                if download_ftp:
                    if all([ftp_host, ftp_user, ftp_password, ftp_file_path]):
                        # Guardar configuraci√≥n autom√°ticamente al descargar
                        st.session_state.ftp_config = {
                            'host': ftp_host,
                            'port': ftp_port,
                            'user': ftp_user,
                            'file_path': ftp_file_path
                        }
                        if ftp_password:
                            st.session_state.ftp_password = ftp_password
                        
                        with st.spinner("Conectando al servidor FTP..."):
                            success, result = download_from_ftp(
                                ftp_host, ftp_user, ftp_password, ftp_file_path, ftp_port,
                                passive_mode, connection_timeout
                            )
                            
                            if success:
                                # Validar contenido descargado
                                is_valid, csv_result = validate_csv_content(result)
                                
                                if is_valid:
                                    st.success("‚úÖ Archivo descargado y validado correctamente")
                                    st.info(f"üìä Se encontraron {len(csv_result)} productos")
                                    
                                    if st.button("üíæ Actualizar Base de Datos", type="primary", key="ftp_update"):
                                        if save_data(csv_result):
                                            st.success("üéâ ¬°Datos actualizados desde FTP exitosamente!")
                                            st.rerun()
                                else:
                                    st.error(f"‚ùå Error en el archivo descargado: {csv_result}")
                            else:
                                st.error(f"‚ùå {result}")
                    else:
                        st.error("‚ùå Por favor complete todos los campos")
            
            # Configuraci√≥n de actualizaci√≥n autom√°tica
            st.markdown("---")
            st.markdown("**Actualizaci√≥n Autom√°tica:**")
            
            # Inicializar configuraci√≥n autom√°tica (activada por defecto para SFTP)
            if 'auto_ftp_enabled' not in st.session_state:
                # Activar autom√°ticamente si tenemos configuraci√≥n SFTP
                has_sftp_config = (
                    'sftp_config' in st.session_state and 
                    st.session_state.sftp_config.get('host') == 'home567855122.1and1-data.host'
                )
                st.session_state.auto_ftp_enabled = has_sftp_config
            
            # Mostrar mensaje si est√° habilitado por defecto
            if st.session_state.auto_ftp_enabled and 'sftp_config' in st.session_state:
                st.success("üåô Actualizaci√≥n nocturna autom√°tica activada con tu configuraci√≥n SFTP")
            
            col1, col2 = st.columns([3, 1])
            with col1:
                auto_enabled = st.checkbox(
                    "Activar actualizaci√≥n autom√°tica diaria (2:00 AM)",
                    value=st.session_state.auto_ftp_enabled,
                    help="Descarga autom√°ticamente el archivo desde SFTP todas las noches"
                )
            
            with col2:
                if st.button("üîÑ Actualizar Ahora", help="Ejecutar actualizaci√≥n inmediata"):
                    # Priorizar SFTP si est√° configurado
                    if 'sftp_config' in st.session_state and st.session_state.get('sftp_password'):
                        with st.spinner("Actualizando desde SFTP..."):
                            if auto_update_from_ftp():
                                st.success("‚úÖ Actualizaci√≥n autom√°tica desde SFTP completada")
                                st.rerun()
                            else:
                                st.error("‚ùå Error en la actualizaci√≥n autom√°tica desde SFTP")
                    elif 'ftp_config' in st.session_state and st.session_state.get('ftp_password'):
                        with st.spinner("Actualizando desde FTP..."):
                            if auto_update_from_ftp():
                                st.success("‚úÖ Actualizaci√≥n autom√°tica desde FTP completada")
                                st.rerun()
                            else:
                                st.error("‚ùå Error en la actualizaci√≥n autom√°tica desde FTP")
                    else:
                        st.error("‚ùå Configure primero los datos de FTP o SFTP")
            
            # Guardar estado de configuraci√≥n autom√°tica
            if auto_enabled != st.session_state.auto_ftp_enabled:
                st.session_state.auto_ftp_enabled = auto_enabled
                if auto_enabled:
                    # Verificar si tenemos configuraci√≥n SFTP
                    if 'sftp_config' in st.session_state and st.session_state.sftp_config.get('host'):
                        # Configurar actualizaci√≥n autom√°tica para las 2:00 AM
                        schedule.clear()
                        schedule.every().day.at("02:00").do(auto_update_from_ftp)
                        st.success("‚úÖ Actualizaci√≥n autom√°tica activada para las 2:00 AM (SFTP)")
                        st.session_state.sftp_password = "@Q&jb@kpcU(OhpQv95bN0%eI"  # Establecer contrase√±a
                    elif 'ftp_config' in st.session_state:
                        # Verificar que tengamos la contrase√±a guardada para FTP
                        if not st.session_state.get('ftp_password'):
                            st.warning("‚ö†Ô∏è Para la actualizaci√≥n autom√°tica, ingrese la contrase√±a FTP arriba")
                        else:
                            schedule.clear()
                            schedule.every().day.at("02:00").do(auto_update_from_ftp)
                            st.success("‚úÖ Actualizaci√≥n autom√°tica activada para las 2:00 AM (FTP)")
                    else:
                        st.warning("‚ö†Ô∏è Configure primero los datos de conexi√≥n")
                elif not auto_enabled:
                    schedule.clear()
                    st.info("‚ÑπÔ∏è Actualizaci√≥n autom√°tica desactivada")
            
            # Configurar tiempo personalizado
            if auto_enabled:
                st.markdown("**Horario Personalizado:**")
                col1, col2 = st.columns(2)
                with col1:
                    update_hour = st.selectbox("Hora:", list(range(24)), index=2, help="Hora nocturna recomendada: 1-4 AM")
                with col2:
                    update_minute = st.selectbox("Minuto:", [0, 15, 30, 45], index=0)
                
                if st.button("‚è∞ Cambiar Horario"):
                    # Limpiar trabajos anteriores
                    schedule.clear()
                    # Programar nuevo horario
                    time_str = f"{update_hour:02d}:{update_minute:02d}"
                    schedule.every().day.at(time_str).do(auto_update_from_ftp)
                    st.success(f"‚úÖ Actualizaci√≥n programada para las {time_str} (horario nocturno)")
                    
                # Mostrar horario actual configurado
                next_run = schedule.next_run()
                if next_run:
                    st.info(f"üåô Pr√≥xima actualizaci√≥n nocturna: {next_run.strftime('%d/%m/%Y %H:%M:%S')}")
            
            # Mostrar informaci√≥n de √∫ltima actualizaci√≥n
            st.markdown("---")
            if os.path.exists(CSV_FILE_PATH):
                mod_time = os.path.getmtime(CSV_FILE_PATH)
                last_update = datetime.fromtimestamp(mod_time).strftime("%d/%m/%Y %H:%M:%S")
                st.info(f"üìÖ √öltima actualizaci√≥n: {last_update}")
            
            # Mostrar √∫ltima actualizaci√≥n autom√°tica
            if 'last_auto_update' in st.session_state:
                st.info(f"ü§ñ √öltima actualizaci√≥n autom√°tica: {st.session_state.last_auto_update}")
            
            # Estado del programador
            if auto_enabled:
                next_run = schedule.next_run()
                if next_run:
                    st.info(f"‚è≥ Pr√≥xima actualizaci√≥n: {next_run.strftime('%d/%m/%Y %H:%M:%S')}")
        
        with tab3:
            st.markdown("**Configuraci√≥n del Servidor SFTP (SSH):**")
            st.success("‚úÖ SFTP detectado - Esta es la configuraci√≥n correcta para tu servidor")
            st.info("üîß Configuraci√≥n preestablecida - Los datos ya est√°n configurados para tu servidor")
            
            with st.form("sftp_form"):
                sftp_host = st.text_input(
                    "Servidor SFTP:", 
                    value=st.session_state.sftp_config['host'],
                    placeholder="sftp.ejemplo.com"
                )
                sftp_port = st.number_input(
                    "Puerto SSH:", 
                    value=st.session_state.sftp_config['port'], 
                    min_value=1, 
                    max_value=65535
                )
                sftp_user = st.text_input(
                    "Usuario SSH:", 
                    value=st.session_state.sftp_config['user'],
                    placeholder="usuario"
                )
                sftp_password = st.text_input(
                    "Contrase√±a SSH:", 
                    type="password",
                    value="@Q&jb@kpcU(OhpQv95bN0%eI",
                    help="Contrase√±a preconfigurada para el servidor"
                )
                sftp_file_path = st.text_input(
                    "Ruta del archivo:", 
                    value=st.session_state.sftp_config['file_path'],
                    placeholder="/home/usuario/datos/productos.csv"
                )
                
                sftp_timeout = st.slider("Timeout (segundos):", min_value=5, max_value=60, value=30)
                
                col1, col2 = st.columns(2)
                with col1:
                    test_sftp = st.form_submit_button("üîß Probar Conexi√≥n SFTP")
                    save_sftp_config = st.form_submit_button("üíæ Guardar Configuraci√≥n")
                with col2:
                    download_sftp = st.form_submit_button("üîÑ Descargar desde SFTP", type="primary")
                
                if test_sftp:
                    if all([sftp_host, sftp_user, sftp_password]):
                        with st.spinner("Probando conexi√≥n SFTP..."):
                            success, message = test_sftp_connection(sftp_host, sftp_user, sftp_password, sftp_port, sftp_timeout)
                            if success:
                                st.success(f"‚úÖ {message}")
                            else:
                                st.error(f"‚ùå {message}")
                    else:
                        st.error("‚ùå Complete todos los campos para probar la conexi√≥n SFTP")
                
                if save_sftp_config:
                    st.session_state.sftp_config = {
                        'host': sftp_host,
                        'port': sftp_port,
                        'user': sftp_user,
                        'file_path': sftp_file_path,
                        'timeout': sftp_timeout
                    }
                    if sftp_password:
                        st.session_state.sftp_password = sftp_password
                    st.success("‚úÖ Configuraci√≥n SFTP guardada")
                    st.rerun()
                
                if download_sftp:
                    if all([sftp_host, sftp_user, sftp_password, sftp_file_path]):
                        with st.spinner("Descargando desde SFTP..."):
                            success, result = download_from_sftp(sftp_host, sftp_user, sftp_password, sftp_file_path, sftp_port, sftp_timeout)
                            
                            if success:
                                # Mostrar informaci√≥n de depuraci√≥n
                                st.info(f"üìÑ Archivo descargado ({len(result)} caracteres)")
                                
                                # Mostrar una muestra del contenido
                                with st.expander("üîç Vista previa del archivo descargado"):
                                    preview = result[:500] + "..." if len(result) > 500 else result
                                    st.text(preview)
                                
                                is_valid, csv_result = validate_csv_content(result)
                                if is_valid:
                                    st.success("‚úÖ Archivo descargado desde SFTP correctamente")
                                    st.info(f"üìä Se encontraron {len(csv_result)} productos")
                                    
                                    # Guardar el resultado temporalmente para uso fuera del formulario
                                    st.session_state['sftp_download_result'] = csv_result
                                    st.session_state['sftp_download_ready'] = True
                                else:
                                    st.error(f"‚ùå Error en el archivo descargado: {csv_result}")
                                    # Mostrar informaci√≥n adicional para debug
                                    st.info("üí° Verifique que el archivo tenga las columnas: Codigo, Descripcion, Familia, Stock")
                            else:
                                st.error(f"‚ùå {result}")
                    else:
                        st.error("‚ùå Complete todos los campos para descargar desde SFTP")
            
            # Bot√≥n para actualizar base de datos fuera del formulario
            if st.session_state.get('sftp_download_ready', False):
                if st.button("üíæ Actualizar Base de Datos", type="primary", key="sftp_update_outside"):
                    csv_result = st.session_state.get('sftp_download_result')
                    if csv_result is not None:
                        if save_data(csv_result):
                            st.success("üéâ ¬°Datos actualizados desde SFTP exitosamente!")
                            # Limpiar el estado temporal
                            st.session_state['sftp_download_ready'] = False
                            st.session_state.pop('sftp_download_result', None)
                            st.rerun()
                        else:
                            st.error("‚ùå Error al guardar los datos")
            
            with st.expander("üí° Informaci√≥n sobre SFTP"):
                st.markdown("""
                **SFTP vs FTP:**
                - **SFTP**: Protocolo seguro que usa SSH (puerto 22)
                - **FTP**: Protocolo tradicional no seguro (puerto 21)
                
                **Configuraci√≥n t√≠pica SFTP:**
                - Puerto: 22 (est√°ndar SSH)
                - Ruta: `/home/usuario/archivo.csv` o `/var/www/data/productos.csv`
                - Autenticaci√≥n: Usuario y contrase√±a SSH
                
                **Ventajas de SFTP:**
                - ‚úÖ Conexi√≥n encriptada y segura
                - ‚úÖ Compatible con servidores Linux/Unix
                - ‚úÖ Mismo puerto que SSH (22)
                """)
        
        with tab4:
            st.markdown("**Descarga desde URL directa:**")
            st.info("üí° Alternativa m√°s simple al FTP. Use una URL directa al archivo CSV (HTTP/HTTPS)")
            
            with st.form("url_form"):
                csv_url = st.text_input(
                    "URL del archivo CSV:",
                    placeholder="https://ejemplo.com/datos/productos.csv",
                    help="URL directa que apunte al archivo CSV"
                )
                
                url_timeout = st.slider(
                    "Timeout de descarga (segundos):",
                    min_value=5,
                    max_value=120,
                    value=30
                )
                
                col1, col2 = st.columns(2)
                with col1:
                    test_url = st.form_submit_button("üîó Probar URL")
                with col2:
                    download_url = st.form_submit_button("üì• Descargar desde URL", type="primary")
                
                if test_url:
                    if csv_url:
                        with st.spinner("Probando URL..."):
                            success, result = download_from_url(csv_url, timeout=10)
                            if success:
                                # Verificar que sea CSV v√°lido
                                is_valid, csv_result = validate_csv_content(result)
                                if is_valid:
                                    st.success(f"‚úÖ URL v√°lida. Se encontraron {len(csv_result)} productos")
                                else:
                                    st.error(f"‚ùå El archivo no es un CSV v√°lido: {csv_result}")
                            else:
                                st.error(f"‚ùå {result}")
                    else:
                        st.error("‚ùå Ingrese una URL v√°lida")
                
                if download_url:
                    if csv_url:
                        with st.spinner("Descargando desde URL..."):
                            success, result = download_from_url(csv_url, url_timeout)
                            if success:
                                is_valid, csv_result = validate_csv_content(result)
                                if is_valid:
                                    st.success("‚úÖ Archivo descargado y validado correctamente")
                                    st.info(f"üìä Se encontraron {len(csv_result)} productos")
                                    
                                    if st.button("üíæ Actualizar Base de Datos", type="primary", key="url_update"):
                                        if save_data(csv_result):
                                            st.success("üéâ ¬°Datos actualizados desde URL exitosamente!")
                                            st.rerun()
                                else:
                                    st.error(f"‚ùå Error en el archivo descargado: {csv_result}")
                            else:
                                st.error(f"‚ùå {result}")
                    else:
                        st.error("‚ùå Ingrese una URL v√°lida")
            
            # Ejemplos de URLs
            with st.expander("üí° Ejemplos de URLs v√°lidas"):
                st.markdown("""
                **Tipos de URLs compatibles:**
                - `https://ejemplo.com/datos/productos.csv`
                - `http://ftp.ejemplo.com/public/stock.csv`
                - `https://drive.google.com/uc?export=download&id=FILE_ID` (Google Drive)
                - `https://github.com/usuario/repo/raw/main/data.csv` (GitHub)
                
                **Ventajas de usar URL directa:**
                - ‚úÖ M√°s simple que configurar FTP
                - ‚úÖ Funciona con servidores web est√°ndar
                - ‚úÖ Compatible con servicios en la nube
                - ‚úÖ No requiere credenciales especiales
                """)
        
        st.markdown("---")
        
        # Informaci√≥n del sistema
        st.subheader("‚ÑπÔ∏è Informaci√≥n")
        df = load_data()
        st.metric("Total de Productos", len(df))
        
        if not df.empty:
            stock_bajo = len(df[pd.to_numeric(df['Stock'], errors='coerce') <= 5])
            st.metric("üî¥ Stock Bajo (‚â§5)", stock_bajo)
    
    # Cargar datos
    df = load_data()
    
    if df.empty:
        st.warning("‚ö†Ô∏è No hay datos disponibles. Cargue un archivo CSV para comenzar.")
        return
    
    # Barra de b√∫squeda
    col1, col2 = st.columns([3, 1])
    
    with col1:
        search_term = st.text_input(
            "üîç Buscar productos:",
            placeholder="Buscar por c√≥digo, descripci√≥n, familia o stock...",
            help="La b√∫squeda es en tiempo real y busca en todos los campos"
        )
    
    with col2:
        st.markdown("<br>", unsafe_allow_html=True)  # Espaciado
        clear_search = st.button("üóëÔ∏è Limpiar", help="Limpiar b√∫squeda")
        if clear_search:
            st.rerun()
    
    # Filtrar datos
    filtered_df = filter_dataframe(df, search_term)
    
    # Mostrar resultados
    if filtered_df.empty:
        st.warning("üîç No se encontraron productos que coincidan con la b√∫squeda.")
    else:
        # Informaci√≥n de resultados
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìä Productos Encontrados", len(filtered_df))
        with col2:
            if search_term:
                st.metric("üìã Total en Base", len(df))
        with col3:
            # Bot√≥n de exportar
            csv_export = filtered_df.to_csv(index=False)
            st.download_button(
                label="üì• Exportar Resultados",
                data=csv_export,
                file_name=f"stock_productos_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                help="Descargar resultados en formato CSV"
            )
        
        st.markdown("---")
        
        # Preparar datos para mostrar con indicadores de stock
        display_df = filtered_df.copy()
        display_df['Indicador'] = display_df['Stock'].apply(get_stock_color)
        
        # Reordenar columnas
        display_df = display_df[['Indicador', 'Codigo', 'Descripcion', 'Familia', 'Stock']]
        
        # Configurar la tabla
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "Indicador": st.column_config.TextColumn(
                    "Estado",
                    help="üü¢ Stock Alto | üü° Stock Medio | üî¥ Stock Bajo",
                    width="small"
                ),
                "Codigo": st.column_config.TextColumn(
                    "C√≥digo",
                    width="medium"
                ),
                "Descripcion": st.column_config.TextColumn(
                    "Descripci√≥n",
                    width="large"
                ),
                "Familia": st.column_config.TextColumn(
                    "Familia",
                    width="medium"
                ),
                "Stock": st.column_config.NumberColumn(
                    "Stock",
                    width="small",
                    format="%d"
                )
            }
        )
        
        # Leyenda de colores
        st.markdown("---")
        st.markdown("""
        **Leyenda de Stock:**
        - üü¢ **Stock Alto:** M√°s de 20 unidades
        - üü° **Stock Medio:** Entre 6 y 20 unidades  
        - üî¥ **Stock Bajo:** 5 unidades o menos
        """)

def initialize_auto_scheduler():
    """Inicializar el programador autom√°tico al cargar la aplicaci√≥n"""
    # Solo si tenemos configuraci√≥n SFTP v√°lida y est√° habilitado
    if (st.session_state.get('auto_ftp_enabled', False) and 
        'sftp_config' in st.session_state and
        st.session_state.sftp_config.get('host') == 'home567855122.1and1-data.host'):
        
        # Limpiar programaciones anteriores
        schedule.clear()
        # Programar para las 2:00 AM
        schedule.every().day.at("02:00").do(auto_update_from_ftp)
        # Establecer contrase√±a para SFTP
        st.session_state.sftp_password = "@Q&jb@kpcU(OhpQv95bN0%eI"

if __name__ == "__main__":
    # Inicializar el programador autom√°tico
    initialize_auto_scheduler()
    main()
