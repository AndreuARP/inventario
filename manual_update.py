#!/usr/bin/env python3
"""
Script para forzar actualizaci√≥n manual del stock
√ötil para testing o actualizaciones inmediatas
"""

import sys
import os
from datetime import datetime

def manual_update():
    """Ejecutar actualizaci√≥n manual"""
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üîÑ Iniciando actualizaci√≥n manual...")
    
    try:
        # Importar scheduler
        from scheduler_railway import run_scheduled_update, log_message
        
        log_message("‚ö° ACTUALIZACI√ìN MANUAL SOLICITADA")
        
        # Ejecutar actualizaci√≥n
        run_scheduled_update()
        
        print("‚úÖ Actualizaci√≥n manual completada")
        return True
        
    except ImportError:
        print("‚ùå Error: No se pudo importar scheduler_railway.py")
        return False
    except Exception as e:
        print(f"‚ùå Error en actualizaci√≥n manual: {str(e)}")
        return False

def check_config():
    """Verificar configuraci√≥n SFTP"""
    try:
        from scheduler_railway import load_config
        config = load_config()
        sftp_config = config.get('sftp_config', {})
        
        print("üìã Configuraci√≥n SFTP:")
        print(f"  Habilitado: {sftp_config.get('enabled', False)}")
        print(f"  Host: {sftp_config.get('host', 'N/A')}")
        print(f"  Puerto: {sftp_config.get('port', 'N/A')}")
        print(f"  Usuario: {sftp_config.get('user', 'N/A')}")
        print(f"  Archivo: {sftp_config.get('file_path', 'N/A')}")
        
        return sftp_config.get('enabled', False)
        
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {str(e)}")
        return False

def show_last_update():
    """Mostrar √∫ltima actualizaci√≥n"""
    try:
        from scheduler_railway import load_config
        config = load_config()
        last_update = config.get('last_update')
        
        if last_update:
            print(f"‚úÖ √öltima actualizaci√≥n: {last_update}")
        else:
            print("‚è≥ Sin actualizaciones previas")
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

def main():
    """Funci√≥n principal"""
    print("üöÄ ACTUALIZADOR MANUAL DE STOCK - Railway")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "update":
            manual_update()
        elif command == "config":
            check_config()
        elif command == "status":
            show_last_update()
        else:
            print(f"‚ùå Comando desconocido: {command}")
            show_help()
    else:
        show_help()

def show_help():
    """Mostrar ayuda"""
    print("""
üìñ COMANDOS DISPONIBLES:

python manual_update.py update    - Forzar actualizaci√≥n inmediata
python manual_update.py config    - Verificar configuraci√≥n SFTP  
python manual_update.py status    - Ver √∫ltima actualizaci√≥n

üîß VARIABLES DE ENTORNO:
ENABLE_SCHEDULER=true            - Habilitar scheduler autom√°tico
UPDATE_SCHEDULE_TIME=02:00       - Cambiar horario de actualizaci√≥n

üìã EJEMPLOS:
# Actualizaci√≥n inmediata
python manual_update.py update

# Ver configuraci√≥n
python manual_update.py config

# Estado actual  
python manual_update.py status
""")

if __name__ == "__main__":
    main()